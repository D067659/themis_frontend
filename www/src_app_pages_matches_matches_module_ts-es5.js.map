{"version":3,"sources":["webpack:///src/app/pages/matches/matches-routing.module.ts","webpack:///src/app/pages/matches/matches.module.ts","webpack:///src/app/pages/matches/matches.page.ts","webpack:///src/app/pages/matches/matches.page.scss","webpack:///src/app/pages/matches/matches.page.html"],"names":["routes","path","component","MatchesPage","MatchesPageRoutingModule","NgModule","imports","RouterModule","exports","MatchesPageModule","CommonModule","FormsModule","IonicModule","declarations","apiService","toastController","selectedClub","clubs","matches","datepickerinput","today","currentUser","getPossibleClubs","length","setSelectedClub","getAllMatches","club","getClubInformation","clubId","subscribe","push","_id","forEach","match","getParticipationForMatch","participation","doParticipate","hasTime","setParticipationForMatch","res","isBlocked","answer","create","message","duration","color","toast","present","onDidDismiss","then","console","log","ApiService","ToastController","Component","selector","template"],"mappings":"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","file":"src_app_pages_matches_matches_module_ts-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { MatchesPage } from './matches.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MatchesPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MatchesPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MatchesPageRoutingModule } from './matches-routing.module';\n\nimport { MatchesPage } from './matches.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    MatchesPageRoutingModule\n  ],\n  declarations: [MatchesPage]\n})\nexport class MatchesPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { ApiService } from '../../services/api.service';\n\n@Component({\n  selector: 'app-matches',\n  templateUrl: './matches.page.html',\n  styleUrls: ['./matches.page.scss'],\n})\nexport class MatchesPage implements OnInit {\n\n  selectedClub = null;\n  clubs = [];\n  matches = [];\n  datepickerinput = null;\n  today = 2021;\n\n  constructor(\n    private apiService: ApiService,\n    private toastController: ToastController,\n  ) { }\n\n  ngOnInit() {\n    this.selectedClub = this.apiService.currentUser.selectedClub;\n\n    if (!this.selectedClub) {\n      this.getPossibleClubs()\n\n      if (this.clubs.length == 1) {\n        this.setSelectedClub(this.clubs[0]);\n      }\n    }\n    else {\n      this.getAllMatches()\n    }\n  }\n\n  getPossibleClubs() {\n    for (const club of this.apiService.currentUser.clubs) {\n      this.apiService.getClubInformation(club.clubId).subscribe((club: any) => {\n        this.clubs.push(club)\n      });\n    }\n  }\n\n  setSelectedClub(club) {\n    this.selectedClub = club;\n    this.apiService.currentUser.selectedClub = this.selectedClub;\n    this.getAllMatches()\n  }\n\n  getAllMatches() {\n    this.apiService.getAllMatches(this.selectedClub._id).subscribe((matches: Array<any>) => {\n      // Check for users participation for each match\n      matches.forEach(match => {\n        this.apiService.getParticipationForMatch(match.clubId, match._id).subscribe((participation: any) => {\n          match.doParticipate = participation?.hasTime;\n        })\n      });\n      this.matches = matches\n    });\n  }\n\n  toggleParticipation(match) {\n    match.doParticipate = false;\n  }\n\n  selectParticipation(match) {\n    this.apiService.setParticipationForMatch(match.clubId, match._id, match.doParticipate).subscribe(async (res: any) => {\n      match.isBlocked = true;\n      const answer = res.hasTime ? 'bestätigt' : 'abgelehnt';\n      const toast = await this.toastController.create({\n        message: `Teilnahme wurde ${answer}`,\n        duration: 2000,\n        color: res.hasTime ? 'success' : 'danger'\n      });\n      toast.present();\n\n      toast.onDidDismiss().then(() => {\n        match.isBlocked = false;\n      });\n    })\n  }\n\n  resetSelectedClub() {\n    this.selectedClub = null;\n    this.matches = null;\n  }\n\n  test() {\n    console.log(this.datepickerinput);\n  }\n\n}\n","export default \".center {\\n  margin-left: auto;\\n  margin-right: auto;\\n  margin-top: 3px;\\n  margin-bottom: 3px;\\n  text-align: center;\\n  display: flex;\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGNoZXMucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsaUJBQUE7RUFDQSxrQkFBQTtFQUNBLGVBQUE7RUFDQSxrQkFBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLHVCQUFBO0FBQ0YiLCJmaWxlIjoibWF0Y2hlcy5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2VudGVyIHtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbiAgbWFyZ2luLXRvcDogM3B4O1xuICBtYXJnaW4tYm90dG9tOiAzcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG4iXX0= */\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title *ngIf=\\\"selectedClub\\\">{{ selectedClub.name }}</ion-title>\\n    <ion-title *ngIf=\\\"!selectedClub\\\">Wähle deinen Verein</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-row>\\n    <ion-col size=\\\"12\\\" size-md='6' offset-md='3'>\\n      <ion-button type=\\\"button\\\" expand=\\\"block\\\" fill=\\\"clear\\\" (click)=\\\"resetSelectedClub()\\\" *ngIf=\\\"selectedClub\\\">\\n        Ausgewählter\\n        Verein ändern\\n      </ion-button>\\n      <ion-grid *ngIf=\\\"!selectedClub\\\">\\n        <ion-list *ngFor=\\\"let club of clubs\\\">\\n          <ion-card button (click)=\\\"setSelectedClub(club)\\\">\\n            <ion-card-content>\\n              {{ club.name }}\\n            </ion-card-content>\\n          </ion-card>\\n        </ion-list>\\n      </ion-grid>\\n\\n      <ion-grid *ngIf=\\\"selectedClub\\\">\\n        <ion-list *ngFor=\\\"let match of matches\\\">\\n          <ion-card>\\n            <ion-card-header>\\n              <ion-card-subtitle>{{ match.isHome ? 'Heimspiel' : 'Auswärtsspiel' }} gegen {{ match.opponent }}\\n              </ion-card-subtitle>\\n              <ion-card-title>{{ match.startDate | date:'EE, dd.MM.yy' }}</ion-card-title>\\n            </ion-card-header>\\n            <div>\\n              <ion-item text-wrap>\\n                <ion-icon name=\\\"time-outline\\\" slot=\\\"start\\\"></ion-icon>\\n                <ion-label> {{match.startDate | date:\\\"HH:mm \\\":\\\"+0000\\\"}} Uhr</ion-label>\\n              </ion-item>\\n              <ion-item text-wrap>\\n                <ion-icon name=\\\"flag-outline\\\" slot=\\\"start\\\"></ion-icon>\\n                <ion-label>{{ match.city }}</ion-label>\\n              </ion-item>\\n              <ion-item text-wrap>\\n                <ion-icon name=\\\"location-outline\\\" slot=\\\"start\\\"></ion-icon>\\n                <ion-label text-wrap>{{match.meetingPoint }}</ion-label>\\n              </ion-item>\\n            </div>\\n            <div>\\n              <p style=\\\"text-align: center;\\\"><b>Teilnahme</b></p>\\n              <ion-segment [(ngModel)]=\\\"match.doParticipate\\\" (ngModelChange)=\\\"selectParticipation(match)\\\"\\n                color=\\\"primary\\\" scrollable class=\\\"center\\\" [disabled]=\\\"match.isBlocked\\\">\\n                <ion-segment-button value=\\\"true\\\">\\n                  <ion-icon name=\\\"checkmark-circle-outline\\\"></ion-icon>\\n                  <ion-label>Ja</ion-label>\\n                </ion-segment-button>\\n                <ion-segment-button value=\\\"false\\\">\\n                  <ion-label>Nein</ion-label>\\n                  <ion-icon name=\\\"close-circle-outline\\\"></ion-icon>\\n                </ion-segment-button>\\n              </ion-segment>\\n            </div>\\n            <div>\\n            </div>\\n          </ion-card>\\n\\n        </ion-list>\\n        <ion-text class=\\\"center\\\" *ngIf=\\\"matches?.length == 0\\\">Keine bevorstehenden Spiele für {{ selectedClub.name }}\\n          gefunden. </ion-text>\\n      </ion-grid>\\n\\n      <ion-item>\\n        <ion-label>Datum</ion-label>\\n        <ion-datetime displayFormat=\\\"D MMM YYYY H:mm\\\" min=\\\"2021\\\" max=\\\"2023\\\" placeholder=\\\"Datum wählen\\\"\\n          (ionChange)=\\\"test()\\\" [(ngModel)]=\\\"datepickerinput\\\">\\n        </ion-datetime>\\n      </ion-item>\\n\\n    </ion-col>\\n  </ion-row>\\n</ion-content>\";"]}